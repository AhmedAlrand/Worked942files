package com.example.financial;

import javafx.application.Platform;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.FileChooser;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.concurrent.CompletableFuture;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.example.financial.DatabaseService.Product;
import javafx.beans.property.SimpleStringProperty;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;

public class InventoryPane extends VBox {
    private static final Logger LOGGER = LoggerFactory.getLogger(InventoryPane.class);
    private ResourceBundle messages;
    private final DatabaseService dbService;
    private final AuditService auditService;
    private TableView<InventoryItem> inventoryTable;
    private TextField productField, warehouseIdField, quantityField, customerIdField, customerNameField;
    private TextField searchCustomerField;
    private ComboBox<String> unitCombo;
    private static InventoryPane activeInstance;
    private boolean isRefreshing = false;
    private Label productIdLabel, warehouseIdLabel, quantityLabel, unitLabel, customerIdLabel, customerNameLabel;
    private Button addButton, refreshButton, addAttachmentButton, viewAttachmentsButton, addNewProductButton;
    private Button searchCustomerButton;
    private TableColumn<InventoryItem, String> productCol, unitCol, invoiceIdCol;
    private TableColumn<InventoryItem, Integer> warehouseIdCol;
    private TableColumn<InventoryItem, Double> quantityCol;
    private TextField newProductNameField, newWarehouseIdField, newQuantityField;
    private ComboBox<String> newUnitCombo, quantityUnitCombo;
    private List<ComboBox<String>> unitNameFields;
    private List<TextField> unitFactorFields;
    private List<CheckBox> baseUnitChecks;

    public InventoryPane(ResourceBundle messages, DatabaseService dbService, AuditService auditService) {
        this.messages = messages;
        this.dbService = dbService;
        this.auditService = auditService;
        activeInstance = this;
        this.unitNameFields = new ArrayList<>();
        this.unitFactorFields = new ArrayList<>();
        this.baseUnitChecks = new ArrayList<>();
        initializeUI();
        loadInventory();
    }

    @SuppressWarnings("unchecked")
    private void initializeUI() {
        setSpacing(10);
        setPadding(new javafx.geometry.Insets(10));

        inventoryTable = new TableView<>();

        productCol = new TableColumn<>(messages.getString("product"));
        productCol.setCellValueFactory(cellData -> {
            InventoryItem item = cellData.getValue();
            return new SimpleStringProperty(item.getProductId() + " - " + item.getProductName());
        });

        warehouseIdCol = new TableColumn<>(messages.getString("warehouseId"));
        warehouseIdCol.setCellValueFactory(new PropertyValueFactory<>("warehouseId"));

        quantityCol = new TableColumn<>(messages.getString("quantity"));
        quantityCol.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        quantityCol.setCellFactory(column -> new TableCell<InventoryItem, Double>() {
            @Override
            protected void updateItem(Double item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(String.format("%.2f", item));
                }
            }
        });

        unitCol = new TableColumn<>(messages.getString("unit"));
        unitCol.setCellFactory(col -> new TableCell<InventoryItem, String>() {
            private final ComboBox<String> unitCombo = new ComboBox<>();

            {
                unitCombo.setOnAction(e -> {
                    InventoryItem item = getTableRow().getItem();
                    if (item != null) {
                        String newUnit = unitCombo.getValue();
                        if (newUnit == null || newUnit.isEmpty()) {
                            newUnit = item.getUnit();
                        }
                        updateUnitForItem(item, newUnit);
                    }
                });
            }

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || getTableRow() == null || getTableRow().getItem() == null) {
                    setGraphic(null);
                } else {
                    InventoryItem inventoryItem = getTableRow().getItem();
                    if (unitCombo.getItems().isEmpty() || !unitCombo.getItems().equals(inventoryItem.getUnitOptions())) {
                        unitCombo.getItems().setAll(inventoryItem.getUnitOptions());
                    }
                    unitCombo.setValue(inventoryItem.getUnit());
                    setGraphic(unitCombo);
                }
            }
        });

        invoiceIdCol = new TableColumn<>("Invoice ID");
        invoiceIdCol.setCellValueFactory(new PropertyValueFactory<>("invoiceId"));

        inventoryTable.getColumns().addAll(productCol, warehouseIdCol, quantityCol, unitCol, invoiceIdCol);
        inventoryTable.setPrefHeight(300);

        GridPane inputGrid = new GridPane();
        inputGrid.setHgap(10);
        inputGrid.setVgap(10);

        productIdLabel = new Label(messages.getString("productId"));
        inputGrid.add(productIdLabel, 0, 0);
        productField = new TextField();
        productField.setPromptText("Type to search (e.g., Prod)");
        productField.textProperty().addListener((obs, oldVal, newVal) -> suggestProducts(newVal));
        inputGrid.add(productField, 1, 0);

        warehouseIdLabel = new Label(messages.getString("warehouseId"));
        inputGrid.add(warehouseIdLabel, 0, 1);
        warehouseIdField = new TextField();
        inputGrid.add(warehouseIdField, 1, 1);

        quantityLabel = new Label(messages.getString("quantity"));
        inputGrid.add(quantityLabel, 0, 2);
        quantityField = new TextField();
        quantityField.setPromptText("e.g., +25 or -10");
        inputGrid.add(quantityField, 1, 2);

        unitLabel = new Label(messages.getString("unit"));
        inputGrid.add(unitLabel, 2, 2);
        unitCombo = new ComboBox<>();
        unitCombo.setPromptText("Select Product first");
        inputGrid.add(unitCombo, 3, 2);

        customerIdLabel = new Label(messages.getString("customerId"));
        inputGrid.add(customerIdLabel, 0, 3);
        customerIdField = new TextField();
        customerIdField.setPromptText("e.g., 1 (optional)");
        inputGrid.add(customerIdField, 1, 3);

        customerNameLabel = new Label(messages.getString("customerName"));
        inputGrid.add(customerNameLabel, 0, 4);
        customerNameField = new TextField();
        customerNameField.setPromptText("Type to search (e.g., Cust, optional)");
        customerNameField.textProperty().addListener((obs, oldVal, newVal) -> suggestCustomers(customerNameField, newVal));
        inputGrid.add(customerNameField, 1, 4);

        HBox buttons = new HBox(10);
        addButton = new Button(messages.getString("addInventory"));
        addButton.setOnAction(e -> addInventoryItem());
        refreshButton = new Button(messages.getString("refresh"));
        refreshButton.setOnAction(e -> loadInventory());
        addAttachmentButton = new Button(messages.getString("addAttachment"));
        addAttachmentButton.setOnAction(e -> addAttachment());
        viewAttachmentsButton = new Button(messages.getString("viewAttachment"));
        viewAttachmentsButton.setOnAction(e -> viewAttachments());
        addNewProductButton = new Button(messages.getString("addNewProduct"));
        addNewProductButton.setOnAction(e -> showAddNewProductDialog());
        
        searchCustomerField = new TextField();
        searchCustomerField.setPromptText("e.g., 101 - John (Cust) or 2 - Bader (Supp)");
        searchCustomerField.textProperty().addListener((obs, oldVal, newVal) -> suggestContacts(searchCustomerField, newVal));
        searchCustomerButton = new Button("Search by Contact");
        searchCustomerButton.setOnAction(e -> searchByContact());

        buttons.getChildren().addAll(addButton, refreshButton, addAttachmentButton, viewAttachmentsButton, 
                                     addNewProductButton, searchCustomerField, searchCustomerButton);

        getChildren().addAll(inventoryTable, inputGrid, buttons);
    }

    // Add this method from my update
    private void updateUnitForItem(InventoryItem item, String newUnit) {
        try {
            int productId = item.getProductId();
            int warehouseId = item.getWarehouseId();

            // Fetch the current quantity and unit from the database
            double currentQuantity;
            String currentUnit;
            try (Connection conn = dbService.dataSource.getConnection();
                 PreparedStatement stmt = conn.prepareStatement(
                     "SELECT quantity, unit FROM Inventory WHERE productId = ? AND warehouseId = ?")) {
                stmt.setInt(1, productId);
                stmt.setInt(2, warehouseId);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    currentQuantity = rs.getDouble("quantity");
                    currentUnit = rs.getString("unit") != null ? rs.getString("unit") : "Piece";
                } else {
                    throw new SQLException("Inventory item not found for ProductID=" + productId);
                }
            }

            // Calculate the new quantity based on unit conversion
            double oldFactor = dbService.getUnitFactor(productId, currentUnit);
            double newFactor = dbService.getUnitFactor(productId, newUnit);
            double quantityInPieces = currentQuantity * oldFactor;
            double newQuantity = quantityInPieces / newFactor;

            LOGGER.debug("Unit switch: ProductID={}, OldUnit={}, OldFactor={}, OldQty={}, NewUnit={}, NewFactor={}, NewQty={}",
                         productId, currentUnit, oldFactor, currentQuantity, newUnit, newFactor, newQuantity);

            // Update the database with the new unit and quantity
            try (Connection conn = dbService.dataSource.getConnection();
                 PreparedStatement stmt = conn.prepareStatement(
                     "UPDATE Inventory SET unit = ?, quantity = ? WHERE productId = ? AND warehouseId = ?")) {
                stmt.setString(1, newUnit);
                stmt.setDouble(2, newQuantity);
                stmt.setInt(3, productId);
                stmt.setInt(4, warehouseId);
                stmt.executeUpdate();
            }

            // Refresh the inventory table
            CompletableFuture.runAsync(() -> {
                try {
                    List<InventoryItem> updatedItems = dbService.getInventoryItems(1, 100); // Fixed typo from "db" to "dbService"

                    Platform.runLater(() -> {
                        if (inventoryTable != null && inventoryTable.getItems() != null) {
                            inventoryTable.getItems().clear();
                            inventoryTable.getItems().addAll(updatedItems);
                            inventoryTable.refresh();
                        }
                    });
                    LOGGER.info("Updated ProductID={} from {} ({} units) to {} ({} units)", 
                                productId, currentUnit, currentQuantity, newUnit, newQuantity);
                } catch (DatabaseException ex) {
                    LOGGER.error("Failed to reload inventory after unit change for ProductID={}", productId, ex);
                    Platform.runLater(() -> new Alert(Alert.AlertType.ERROR, "Failed to reload inventory: " + ex.getMessage()).showAndWait());
                }
            });
        } catch (DatabaseException | SQLException ex) {
            LOGGER.error("Failed to update unit for ProductID={}", item.getProductId(), ex);
            Platform.runLater(() -> new Alert(Alert.AlertType.ERROR, "Failed to update unit: " + ex.getMessage()).showAndWait());
        }
    }

    // Continue with your original methods here
    private void suggestContacts(TextField inputField, String input) {
        ContextMenu suggestions = new ContextMenu();
        if (input == null || input.trim().isEmpty()) {
            suggestions.hide();
            return;
        }
        try {
            String lowerInput = input.toLowerCase();
            List<String> customers = dbService.getCustomersWithNames();
            List<String> suppliers = dbService.getSuppliersWithNames();
            for (String customer : customers) {
                if (customer.toLowerCase().contains(lowerInput)) {
                    MenuItem item = new MenuItem(customer + " (Cust)");
                    item.setOnAction(e -> {
                        inputField.setText(customer);
                        suggestions.hide();
                    });
                    suggestions.getItems().add(item);
                }
            }
            for (String supplier : suppliers) {
                if (supplier.toLowerCase().contains(lowerInput)) {
                    MenuItem item = new MenuItem(supplier + " (Supp)");
                    item.setOnAction(e -> {
                        inputField.setText(supplier);
                        suggestions.hide();
                    });
                    suggestions.getItems().add(item);
                }
            }
            if (!suggestions.getItems().isEmpty()) {
                suggestions.show(inputField, javafx.geometry.Side.BOTTOM, 0, 0);
            } else {
                suggestions.hide();
            }
        } catch (DatabaseException e) {
            LOGGER.error("Failed to fetch contacts for suggestion", e);
            new Alert(Alert.AlertType.ERROR, "Error loading contacts: " + e.getMessage()).showAndWait();
        }
    }

    private void searchByContact() {
        String contactText = searchCustomerField.getText();
        LOGGER.info("Search triggered with input: {}", contactText);
        if (contactText == null || contactText.trim().isEmpty()) {
            new Alert(Alert.AlertType.WARNING, "Please enter a contact to search.").showAndWait();
            return;
        }
        CompletableFuture.runAsync(() -> {
            try {
                String[] parts = contactText.split(" - ");
                int contactId = Integer.parseInt(parts[0]);
                String contactName = parts[1];
                List<InventoryItem> items;
                if (dbService.getCustomersWithNames().stream().anyMatch(c -> c.equals(contactText))) {
                    LOGGER.info("Searching inventory for customerId: {}", contactId);
                    items = dbService.searchInventoryByCustomer(contactId);
                    LOGGER.info("Found {} items for customerId: {}", items.size(), contactId);
                } else if (dbService.getSuppliersWithNames().stream().anyMatch(s -> s.equals(contactText))) {
                    LOGGER.info("Searching inventory for supplierId: {}", contactId);
                    items = dbService.searchInventoryBySupplier(contactId);
                    LOGGER.info("Found {} items for supplierId: {}", items.size(), contactId);
                } else {
                    LOGGER.warn("Contact not recognized as customer or supplier: {}", contactText);
                    javafx.application.Platform.runLater(() -> 
                        new Alert(Alert.AlertType.WARNING, "Contact not found as customer or supplier.").showAndWait());
                    return;
                }
                javafx.application.Platform.runLater(() -> {
                    inventoryTable.getItems().clear();
                    inventoryTable.getItems().addAll(items);
                    inventoryTable.refresh();
                });
            } catch (NumberFormatException e) {
                LOGGER.error("Invalid contact ID format: {}", contactText, e);
                javafx.application.Platform.runLater(() -> 
                    new Alert(Alert.AlertType.ERROR, "Invalid contact ID format.").showAndWait());
            } catch (DatabaseException e) {
                LOGGER.error("Search failed for input: {}", contactText, e);
                ErrorHandler.handleException(e, "Failed to search inventory by contact", null);
            }
        }, FinancialManagementApp.executor);
    }
//=====================

    public void refreshLanguage(ResourceBundle newMessages) {
        this.messages = newMessages;
        productCol.setText(messages.getString("product")); // Updated
        warehouseIdCol.setText(messages.getString("warehouseId"));
        quantityCol.setText(messages.getString("quantity"));
        unitCol.setText(messages.getString("unit"));
        productIdLabel.setText(messages.getString("productId"));
        warehouseIdLabel.setText(messages.getString("warehouseId"));
        quantityLabel.setText(messages.getString("quantity"));
        unitLabel.setText(messages.getString("unit"));
        customerIdLabel.setText(messages.getString("customerId"));
        customerNameLabel.setText(messages.getString("customerName"));
        addButton.setText(messages.getString("addInventory"));
        refreshButton.setText(messages.getString("refresh"));
        addAttachmentButton.setText(messages.getString("addAttachment"));
        viewAttachmentsButton.setText(messages.getString("viewAttachment"));
        addNewProductButton.setText(messages.getString("addNewProduct"));
    }

    private void showAddNewProductDialog() {
        Dialog<ButtonType> dialog = new Dialog<>();
        dialog.setTitle(messages.getString("addNewProduct"));
        dialog.setHeaderText(messages.getString("enterNewProductDetails"));

        dialog.getDialogPane().setPrefWidth(600);

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);

        newProductNameField = new TextField();
        newProductNameField.setPromptText("e.g., Widget");
        newWarehouseIdField = new TextField();
        newWarehouseIdField.setPromptText("e.g., 1");
        newQuantityField = new TextField();
        newQuantityField.setPromptText("e.g., 50");
        quantityUnitCombo = new ComboBox<>();
        quantityUnitCombo.setPromptText(messages.getString("unit"));

        grid.add(new Label(messages.getString("product")), 0, 0);
        grid.add(newProductNameField, 1, 0);
        grid.add(new Label(messages.getString("warehouseId")), 0, 1);
        grid.add(newWarehouseIdField, 1, 1);
        grid.add(new Label(messages.getString("quantity")), 0, 2);
        grid.add(newQuantityField, 1, 2);
        grid.add(new Label(messages.getString("unit")), 2, 2);
        grid.add(quantityUnitCombo, 3, 2);

        VBox unitsBox = new VBox(5);
        ScrollPane unitsScroll = new ScrollPane(unitsBox);
        unitsScroll.setFitToWidth(true);
        unitsScroll.setPrefHeight(150);

        unitNameFields.clear();
        unitFactorFields.clear();
        baseUnitChecks.clear();

        List<String> unitOptions = List.of(
            messages.getString("unit.piece"),
            messages.getString("unit.box"),
            messages.getString("unit.carton"),
            messages.getString("unit.woodbox"),
            messages.getString("unit.roll"),
            messages.getString("unit.set")
        );

        HBox unit1Row = createUnitRow(unitsBox, messages.getString("unit.piece"), "1", true, unitOptions);
        HBox unit2Row = createUnitRow(unitsBox, messages.getString("unit.box"), "12", false, unitOptions);
        HBox unit3Row = createUnitRow(unitsBox, messages.getString("unit.carton"), "120", false, unitOptions);
        unitsBox.getChildren().addAll(unit1Row, unit2Row, unit3Row);

        updateQuantityUnitCombo();

        Button addUnitButton = new Button(messages.getString("addUnit"));
        addUnitButton.setOnAction(e -> {
            System.out.println("Add Unit button clicked!");
            HBox newRow = createUnitRow(unitsBox, "", "1", false, unitOptions);
            unitsBox.getChildren().add(newRow);
            updateQuantityUnitCombo();
            System.out.println("After add: unitNameFields size = " + unitNameFields.size() + ", quantityUnitCombo items = " + quantityUnitCombo.getItems());
        });

        Button refreshDropdownButton = new Button("Refresh Dropdown");
        refreshDropdownButton.setOnAction(e -> {
            updateQuantityUnitCombo();
            System.out.println("Refresh clicked: quantityUnitCombo items = " + quantityUnitCombo.getItems());
        });

        Label dropdownItemsLabel = new Label("Dropdown items: " + quantityUnitCombo.getItems().toString());
        quantityUnitCombo.getItems().addListener((javafx.collections.ListChangeListener<String>) c -> {
            dropdownItemsLabel.setText("Dropdown items: " + quantityUnitCombo.getItems().toString());
        });

        VBox content = new VBox(10, grid, new Label(messages.getString("unitsSection")), unitsScroll, addUnitButton, refreshDropdownButton, dropdownItemsLabel);
        dialog.getDialogPane().setContent(content);
        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        dialog.showAndWait().ifPresent(result -> {
            if (result == ButtonType.OK) {
                addNewProduct();
            }
        });
    }

    private HBox createUnitRow(VBox unitsBox, String defaultName, String defaultFactor, 
                              boolean isBase, List<String> unitOptions) {
        HBox row = new HBox(10);
        ComboBox<String> nameField = new ComboBox<>();
        nameField.getItems().addAll(unitOptions);
        nameField.setEditable(true);
        nameField.setValue(defaultName.isEmpty() ? unitOptions.get(0) : defaultName);
        TextField factorField = new TextField(defaultFactor);
        CheckBox baseCheck = new CheckBox("Base");
        baseCheck.setSelected(isBase);
        baseCheck.setOnAction(e -> {
            if (baseCheck.isSelected()) {
                factorField.setText("1");
                factorField.setDisable(true);
                baseUnitChecks.forEach(check -> {
                    if (check != baseCheck) {
                        check.setSelected(false);
                        check.getParent().lookup(".text-field:nth-child(4)").setDisable(false);
                    }
                });
            } else {
                factorField.setDisable(false);
            }
        });
        Button removeButton = new Button(messages.getString("removeUnit"));
        removeButton.setOnAction(e -> {
            System.out.println("Remove button clicked!");
            unitsBox.getChildren().remove(row);
            unitNameFields.remove(nameField);
            unitFactorFields.remove(factorField);
            baseUnitChecks.remove(baseCheck);
            updateQuantityUnitCombo();
            System.out.println("After remove: unitNameFields size = " + unitNameFields.size() + ", quantityUnitCombo items = " + quantityUnitCombo.getItems());
        });
        row.getChildren().addAll(new Label(messages.getString("unit")), nameField, new Label("Factor:"), factorField, baseCheck, removeButton);
        unitNameFields.add(nameField);
        unitFactorFields.add(factorField);
        baseUnitChecks.add(baseCheck);
        if (isBase) factorField.setDisable(true);
        return row;
    }

    private void updateQuantityUnitCombo() {
        String currentSelection = quantityUnitCombo.getValue();
        quantityUnitCombo.getItems().clear();
        for (ComboBox<String> combo : unitNameFields) {
            String unitName = combo.getValue();
            if (unitName != null && !unitName.isEmpty() && !quantityUnitCombo.getItems().contains(unitName)) {
                quantityUnitCombo.getItems().add(unitName);
            }
        }
        if (!quantityUnitCombo.getItems().isEmpty()) {
            if (currentSelection != null && quantityUnitCombo.getItems().contains(currentSelection)) {
                quantityUnitCombo.setValue(currentSelection);
            } else {
                quantityUnitCombo.setValue(quantityUnitCombo.getItems().get(0));
            }
        }
        quantityUnitCombo.hide();
        quantityUnitCombo.show();
        System.out.println("Updated: unitNameFields size = " + unitNameFields.size() + ", quantityUnitCombo items = " + quantityUnitCombo.getItems());
    }
//======================================

private void addNewProduct() {
    CompletableFuture.runAsync(() -> {
        try {
            String name = newProductNameField.getText();
            String warehouseIdText = newWarehouseIdField.getText();
            int warehouseId = warehouseIdText.isEmpty() ? 0 : Integer.parseInt(warehouseIdText);
            String quantityText = newQuantityField.getText();
            double quantity = quantityText.isEmpty() ? 0 : Double.parseDouble(quantityText); // Changed to double
            String quantityUnit = quantityUnitCombo.getValue();

            if (name.isEmpty()) {
                javafx.application.Platform.runLater(() -> 
                    new Alert(Alert.AlertType.WARNING, messages.getString("pleaseEnterProductName")).showAndWait());
                return;
            }
            if (quantityUnit == null || quantityUnit.isEmpty()) {
                javafx.application.Platform.runLater(() -> 
                    new Alert(Alert.AlertType.WARNING, messages.getString("pleaseSelectQuantityUnit")).showAndWait());
                return;
            }

            List<Map<String, Object>> units = new ArrayList<>();
            int baseIndex = -1;
            for (int i = 0; i < baseUnitChecks.size(); i++) {
                if (baseUnitChecks.get(i).isSelected()) {
                    baseIndex = i;
                    break;
                }
            }
            if (baseIndex == -1) {
                javafx.application.Platform.runLater(() -> 
                    new Alert(Alert.AlertType.WARNING, messages.getString("pleaseSelectBaseUnit")).showAndWait());
                return;
            }

            String baseUnit = unitNameFields.get(baseIndex).getValue();
            double baseFactor = Double.parseDouble(unitFactorFields.get(baseIndex).getText());
            double quantityFactor = 0.0;

            for (int i = 0; i < unitNameFields.size(); i++) {
                String unitName = unitNameFields.get(i).getValue();
                double factor = Double.parseDouble(unitFactorFields.get(i).getText());
                if (!unitName.isEmpty() && factor > 0) {
                    units.add(Map.of("unit", unitName, "factor", factor));
                    if (unitName.equals(quantityUnit)) {
                        quantityFactor = factor;
                    }
                }
            }

            if (quantityFactor == 0.0) {
                javafx.application.Platform.runLater(() -> 
                    new Alert(Alert.AlertType.WARNING, messages.getString("quantityUnitNotFound")).showAndWait());
                return;
            }

            int pieces = (int) (quantity * quantityFactor); // Still int for initial inventory

            int newProductId = dbService.addNewProduct(name, warehouseId, pieces, units);
            auditService.logAction("user", "inventory", null, 
                "Added new product: ID=" + newProductId + ", Name=" + name + ", Quantity=" + quantity + " " + quantityUnit + " (" + pieces + " pieces)", null, null);

            javafx.application.Platform.runLater(() -> {
                loadInventory();
                new Alert(Alert.AlertType.INFORMATION, 
                    messages.getString("productAddedSuccessfully") + ": " + name + " (ID: " + newProductId + ")").showAndWait();
            });
        } catch (NumberFormatException e) {
            ErrorHandler.handleException(e, messages.getString("invalidInputNumbers"), null);
        } catch (DatabaseException e) {
            ErrorHandler.handleException(e, messages.getString("failedToAddProduct"), null);
        }
    }, FinancialManagementApp.executor);
}

//===========================================
    private void suggestProducts(String input) {
        ContextMenu suggestions = new ContextMenu();
        if (input == null || input.trim().isEmpty()) {
            suggestions.hide();
            return;
        }
        try {
            String lowerInput = input.toLowerCase();
            List<Product> products = dbService.getProducts();
            for (Product p : products) {
                String item = p.getId() + " - " + p.getName();
                if (item.toLowerCase().contains(lowerInput)) {
                    MenuItem menuItem = new MenuItem(item);
                    menuItem.setOnAction(e -> {
                        productField.setText(item);
                        updateUnitCombo(item);
                        suggestions.hide();
                    });
                    suggestions.getItems().add(menuItem);
                }
            }
            if (!suggestions.getItems().isEmpty()) {
                suggestions.show(productField, javafx.geometry.Side.BOTTOM, 0, 0);
            } else {
                suggestions.hide();
            }
        } catch (DatabaseException e) {
            LOGGER.error("Failed to fetch products for suggestion", e);
            new Alert(Alert.AlertType.ERROR, "Error loading products: " + e.getMessage()).showAndWait();
        }
    }

    private void suggestCustomers(TextField inputField, String input) {
        ContextMenu suggestions = new ContextMenu();
        if (input == null || input.trim().isEmpty()) {
            suggestions.hide();
            return;
        }
        try {
            String lowerInput = input.toLowerCase();
            List<String> customers = dbService.getCustomersWithNames();
            for (String customer : customers) {
                if (customer.toLowerCase().contains(lowerInput)) {
                    MenuItem item = new MenuItem(customer);
                    item.setOnAction(e -> {
                        inputField.setText(customer);
                        suggestions.hide();
                    });
                    suggestions.getItems().add(item);
                }
            }
            if (!suggestions.getItems().isEmpty()) {
                suggestions.show(inputField, javafx.geometry.Side.BOTTOM, 0, 0);
            } else {
                suggestions.hide();
            }
        } catch (DatabaseException e) {
            LOGGER.error("Failed to fetch customer names for suggestion", e);
            new Alert(Alert.AlertType.ERROR, "Error loading customers: " + e.getMessage()).showAndWait();
        }
    }

    private void updateUnitCombo(String productText) {
        try {
            if (productText != null && !productText.trim().isEmpty()) {
                int productId = Integer.parseInt(productText.split(" - ")[0]);
                List<String> units = dbService.getProductUnits(productId);
                unitCombo.getItems().clear();
                unitCombo.getItems().addAll(units);
                if (!units.isEmpty()) unitCombo.setValue(units.get(0));
            } else {
                unitCombo.getItems().clear();
                unitCombo.setPromptText(messages.getString("selectProductFirst"));
            }
        } catch (NumberFormatException | DatabaseException e) {
            unitCombo.getItems().clear();
            unitCombo.setPromptText(messages.getString("invalidProduct"));
        }
    }

    //=======================


private void loadInventory() {
        if (isRefreshing) return;
        isRefreshing = true;
        CompletableFuture.runAsync(() -> {
            try {
                List<InventoryItem> items = dbService.getInventoryItems(1, 100);
                javafx.application.Platform.runLater(() -> {
                    inventoryTable.getItems().clear();
                    inventoryTable.getItems().addAll(items);
                    isRefreshing = false;
                });
            } catch (DatabaseException e) {
                ErrorHandler.handleException(e, messages.getString("failedToLoadInventory"), null);
                javafx.application.Platform.runLater(() -> isRefreshing = false);
            }
        }, FinancialManagementApp.executor);
    }

    //============================
        private void addInventoryItem() {
    try {
        String productText = productField.getText();
        if (productText.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Product field cannot be empty").showAndWait();
            return;
        }
        int productId = Integer.parseInt(productText.split(" - ")[0]);
        int warehouseId = Integer.parseInt(warehouseIdField.getText());
        double quantityChange = Double.parseDouble(quantityField.getText()); // Changed to double
        String unit = unitCombo.getValue();
        int customerId = customerIdField.getText().isEmpty() ? 0 : Integer.parseInt(customerIdField.getText());
        String customerName = customerNameField.getText().isEmpty() ? "Unknown" : customerNameField.getText();

        String transactionType = (quantityChange >= 0) ? "Purchase" : "Sale";

        CompletableFuture.runAsync(() -> {
            try {
                dbService.addInventoryItem(productId, warehouseId, Math.abs(quantityChange), unit, customerId, customerName, transactionType);
                Platform.runLater(this::loadInventory);
            } catch (DatabaseException e) {
                LOGGER.error("Failed to add inventory item", e);
                Platform.runLater(() -> new Alert(Alert.AlertType.ERROR, "Failed to add inventory: " + e.getMessage()).showAndWait());
            }
        });
    } catch (NumberFormatException e) {
        LOGGER.error("Invalid input format", e);
        new Alert(Alert.AlertType.ERROR, "Please enter valid numbers for Product ID, Warehouse ID, and Quantity").showAndWait();
    }
}

//================================

    private void addAttachment() {
        CompletableFuture.runAsync(() -> {
            try {
                String productText = productField.getText();
                String warehouseIdText = warehouseIdField.getText();
                if (productText.isEmpty() || warehouseIdText.isEmpty()) {
                    javafx.application.Platform.runLater(() -> new Alert(Alert.AlertType.WARNING, messages.getString("pleaseEnterProductWarehouse")).showAndWait());
                    return;
                }
                String transactionId = productText.split(" - ")[0] + "-" + warehouseIdText;
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle(messages.getString("addAttachment"));
                File file = fileChooser.showOpenDialog(getScene().getWindow());
                if (file != null) {
                    byte[] fileData = Files.readAllBytes(file.toPath());
                    dbService.addAttachment("Inventory", transactionId, fileData);
                    auditService.logAction("user", "attachments", null, "Uploaded attachment for Inventory " + transactionId + ": " + file.getName(), null, null);
                    javafx.application.Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, messages.getString("attachmentAdded") + ": " + file.getName()).showAndWait());
                }
            } catch (IOException e) {
                ErrorHandler.handleException(e, messages.getString("failedToReadFile"), null);
            } catch (DatabaseException e) {
                ErrorHandler.handleException(e, messages.getString("failedToAddAttachment"), null);
            }
        }, FinancialManagementApp.executor);
    }

    @SuppressWarnings("unchecked")
    private void viewAttachments() {
        CompletableFuture.runAsync(() -> {
            try {
                String productText = productField.getText();
                String warehouseIdText = warehouseIdField.getText();
                if (productText.isEmpty() || warehouseIdText.isEmpty()) {
                    javafx.application.Platform.runLater(() -> new Alert(Alert.AlertType.WARNING, messages.getString("pleaseEnterProductWarehouse")).showAndWait());
                    return;
                }
                String transactionId = productText.split(" - ")[0] + "-" + warehouseIdText;
                List<Attachment> attachments = dbService.getAttachments("Inventory", transactionId);
                if (attachments.isEmpty()) {
                    javafx.application.Platform.runLater(() -> new Alert(Alert.AlertType.INFORMATION, messages.getString("noAttachmentsFound")).showAndWait());
                    return;
                }

                javafx.application.Platform.runLater(() -> {
                    Dialog<Void> dialog = new Dialog<>();
                    dialog.setTitle(messages.getString("viewAttachment"));
                    dialog.setHeaderText(messages.getString("attachmentsForInventory") + " " + transactionId);

                    TableView<Attachment> attachmentTable = new TableView<>();
                    TableColumn<Attachment, Integer> idCol = new TableColumn<>(messages.getString("id"));
                    idCol.setCellValueFactory(new PropertyValueFactory<>("id"));
                    TableColumn<Attachment, String> nameCol = new TableColumn<>(messages.getString("fileName"));
                    nameCol.setCellValueFactory(new PropertyValueFactory<>("fileName"));
                    TableColumn<Attachment, Long> sizeCol = new TableColumn<>(messages.getString("sizeBytes"));
                    sizeCol.setCellValueFactory(new PropertyValueFactory<>("fileSize"));
                    TableColumn<Attachment, String> dateCol = new TableColumn<>(messages.getString("uploadDate"));
                    dateCol.setCellValueFactory(new PropertyValueFactory<>("uploadDate"));
                    attachmentTable.getColumns().addAll((TableColumn<Attachment, ?>[]) new TableColumn[] {idCol, nameCol, sizeCol, dateCol});
                    attachmentTable.getItems().addAll(attachments);
                    attachmentTable.setPrefHeight(200);

                    Button downloadButton = new Button(messages.getString("download"));
                    downloadButton.setOnAction(e -> {
                        Attachment selected = attachmentTable.getSelectionModel().getSelectedItem();
                        if (selected != null) {
                            downloadAttachment(selected.getId(), selected.getFileName());
                        } else {
                            new Alert(Alert.AlertType.WARNING, messages.getString("selectAttachmentToDownload")).showAndWait();
                        }
                    });

                    Button editButton = new Button(messages.getString("edit"));
                    editButton.setOnAction(e -> {
                        Attachment selected = attachmentTable.getSelectionModel().getSelectedItem();
                        if (selected != null) {
                            editAttachment(selected.getId());
                        } else {
                            new Alert(Alert.AlertType.WARNING, messages.getString("selectAttachmentToEdit")).showAndWait();
                        }
                    });

                    HBox buttonBox = new HBox(10, downloadButton, editButton);
                    VBox dialogContent = new VBox(10, attachmentTable, buttonBox);
                    dialog.getDialogPane().setContent(dialogContent);
                    dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);
                    dialog.showAndWait();
                });
            } catch (DatabaseException e) {
                ErrorHandler.handleException(e, messages.getString("failedToLoadAttachments"), null);
            }
        }, FinancialManagementApp.executor);
    }

    private void downloadAttachment(int attachmentId, String fileName) {
        try {
            byte[] content = dbService.getAttachmentContent(attachmentId);
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle(messages.getString("saveAttachment"));
            fileChooser.setInitialFileName(fileName);
            File file = fileChooser.showSaveDialog(getScene().getWindow());
            if (file != null) {
                try (FileOutputStream fos = new FileOutputStream(file)) {
                    fos.write(content);
                }
                auditService.logAction("user", "attachments", String.valueOf(attachmentId), "Downloaded attachment: " + fileName, null, null);
                new Alert(Alert.AlertType.INFORMATION, messages.getString("attachmentSavedTo") + " " + file.getAbsolutePath()).showAndWait();
            }
        } catch (DatabaseException | IOException e) {
            ErrorHandler.handleException(e, messages.getString("failedToDownloadAttachment"), null);
        }
    }

    private void editAttachment(int attachmentId) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle(messages.getString("replaceAttachment"));
        File file = fileChooser.showOpenDialog(getScene().getWindow());
        if (file != null) {
            try {
                dbService.updateAttachment(attachmentId, file);
                auditService.logAction("user", "attachments", String.valueOf(attachmentId), "Updated attachment: " + file.getName(), null, null);
                new Alert(Alert.AlertType.INFORMATION, messages.getString("attachmentUpdated") + ": " + file.getName()).showAndWait();
                viewAttachments();
            } catch (DatabaseException e) {
                ErrorHandler.handleException(e, messages.getString("failedToUpdateAttachment"), null);
            }
        }
    }

    public static void refreshIfActive() {
        if (activeInstance != null) {
            activeInstance.loadInventory();
        }
    }

    
}